//
//Copyright (C) 2014 ≈Åukasz Bownik
//
//Permission is hereby granted, free of charge, to any person obtaining a copy of this software and 
//associated documentation files (the "Software"), to deal in the Software without restriction, including 
//without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell 
//copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the 
//following conditions:
//
//The above copyright notice and this permission notice shall be included in all copies or substantial 
//portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT 
//LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
//IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
//HETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
//SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
package fluentJDBC;

import static fluentJDBC.FluentConnection.using;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

/*******************************************************************************
 *
 * @author lukasz.bownik@gmail.com
 ******************************************************************************/
public class Example {

   /***************************************************************************
    * 
    **************************************************************************/
   static class User {

      public User(final String name, final String pass) {

         this.name = name;
         this.pass = pass;
      }
      Integer id;
      String name;
      String pass;
   }
   /***************************************************************************
    * 
    **************************************************************************/
   public static void main(String[] args) throws Exception {

      Connection c = null; // we surely should have initializeded this :)

      //classic JDBC
      List<User> list = new ArrayList<>();
      try (final PreparedStatement s
              = c.prepareStatement("select name, password from users where name = ?")) {
         s.setString(1, "adam");
         try (final ResultSet rs = s.executeQuery()) {
            list.add(new User(rs.getString(1), rs.getString(2)));
         }
      }

      //FluentJDBC - list retireval
      List<User> list2 = using(c).prepare("select name, password from users where name = ?").
              set("Adam").andMap(rs -> new User(rs.getString(1), rs.getString(2)));

      //FluentJDBC - single value retrieval
      Optional<User> user = using(c).prepare("select name, password from users where name = ?").
              set("Adam").andMapOne(rs -> new User(rs.getString(1), rs.getString(2)));

      //FluentJDBC - result printing
      using(c).prepare("select name, password from users where name = ?").
              set("Adam").andForEach(rs -> System.out.println(rs.getString(1)));

      // FluentJDBC - aggregation in application - inefficient example
      String str = using(c).prepare("select name, password from users where name = ?").
              set("Adam").andReduce("", (acc, rs) -> acc + "name: " + rs.getString(1));
      
      //FluentJDBC - insertion (works for modification and deletion as well)
      using(c).prepare("insert into users values (?,?,?)").set(1).set("Adam").
              set("password").andUpdate();
      
      //FluentJDBC - insertion returning autogenerated primary key
      Integer id = (Integer) using(c).
              prepareWithKey("insert into users(name, password) values (?,?)").
              set("Adam").set("secret").andUpdateReturningKey();
      
      //FluentJDBC - custom parameter setting code
      using(c).prepare("insert into users values (?,?,?)").set(1).set("Adam").
              set((s, index) -> s.setString(index, "secret")).andUpdate();
      
      //FluentJDBC - custom PreparedStatement modification
      using(c).prepare("insert into users values (?,?,?)").set(1).
              set("Adam").set("password").
              apply((s) -> s.setCursorName("c1")).andUpdate();
      c.close();
   }
}
